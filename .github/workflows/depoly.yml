name: SAL CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 도커 이미지 빌드
        run: ./gradlew bootBuildImage

      - name: AWS 자격 증명
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR에 로그인
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag docker.io/library/cicd-practice:0.0.1-SNAPSHOT $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Amazon ECR 로그아웃
        run: docker logout ${{ steps.ecr-login.outputs.registry }}

  CD:
    name: EC2에 배포
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: SSH(원격 접속)로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.1.0
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        with:
          host: ${{ secrets.EC2_HOST }} # 원격 서버의 주석
          username: ${{ secrets.EC2_USERNAME }} # 인스턴스를 시작하는 데 사용되는 AMI에 정의된 사용자 이름
          key: ${{ secrets.EC2_KEY }} # 키페어 값
          script_stop: true
          envs: ECR_REPOSITORY, IMAGE_TAG, AWS_ACCOUNT_ID
          script: |
            cd /home/ubuntu/cicd-practice
            docker stop SAL || true
            docker rm SAL || true
            
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          
            docker run -d --name SAL -p 8080:8080 \
              $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG \